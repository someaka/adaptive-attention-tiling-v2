target-version = "py39"
line-length = 100

exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
]

[lint]
select = ["ALL"]

ignore = [
    "A004",    # Import is shadowing a Python builtin
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "ANN204",  # Missing return type annotation for special method
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "ARG002",  # Unused method argument
    "D100",    # Missing docstring in public module
    "D102",    # Missing docstring in public method
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "D416",    # Section name should end with a colon
    "E501",    # Line too long
    "FA100",   # Missing "from __future__ import annotations"
    "FA102",   # Missing "from __future__ import annotations"
    "N812",    # Lowercase imported as non lowercase
    "N813",    # Camelcase imported as lowercase
    "N818",    # Exception name should be named with an Error suffix
    "PLR2004", # Magic value used in comparison
    "PLW2901", # For loop variable overwritten by assignment target
    "PTH123",  # open() should be replaced by Path.open()
    "SLF001",  # Private member accessed
    "B008",    # Do not perform function call in argument defaults
    "COM812",  # Missing trailing comma
    "TID252",  # Prefer absolute imports over relative imports
    "TRY004",  # Prefer TypeError exception for invalid type
    "TRY401",  # Redundant exception object in logging call
    "ISC001",  # Implicit string concatenation
    "T201",    # print found
    "FBT",     # Boolean positional arg in function definition
    "PLR0913", # Too many arguments to function call
    "INP001",  # File is part of an implicit namespace package
    "S603",    # subprocess call - check for execution of untrusted input
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link in TODO
    "FIX002"   # Line contains TODO
]

[lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = [
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
]
"tests/conftest.py" = [
    "S603",    # Subprocess call - we're using resolved paths
    "TRY300",  # Consider moving statement to else block - our current structure is clearer
]

[lint.pydocstyle]
convention = "google"

[lint.isort]
known-first-party = ["src"]

[lint.flake8-tidy-imports]
ban-relative-imports = "all"

[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
