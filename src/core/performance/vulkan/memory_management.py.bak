"""Vulkan memory management system for efficient tensor operations."""

from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Tuple, Union

import numpy as np
import vulkan as vk


@dataclass
class VulkanMemoryMetrics:
    """Metrics for Vulkan memory usage tracking."""

    allocated_memory: int  # Current allocated memory in bytes
    peak_memory: int  # Peak memory usage in bytes
    fragmentation_ratio: float  # Memory fragmentation ratio
    buffer_memory: int  # Memory in Vulkan buffers
    operation_type: str  # Type of operation (allocate, free, transfer)
    device_index: int  # Physical device index


class VulkanMemoryError(Exception):
    """Exception raised for Vulkan memory management errors."""



class VulkanMemoryManager:
    """Manages Vulkan memory allocation and tracking for tensors."""

    def __init__(self, device_index: int = 0):
        """Initialize Vulkan memory manager.

        Args:
            device_index: Physical device index to manage
        """
        self._device_index = device_index
        self._allocated_memory = 0
        self._peak_memory = 0
        self._buffer_allocations: Dict[int, int] = {}  # buffer_id -> size
        self._buffer_memory: Dict[int, Any] = {}  # buffer_id -> memory handle
        self._buffer_shapes: Dict[int, Tuple[int, ...]] = {}  # buffer_id -> shape
        self._buffer_dtypes: Dict[int, np.dtype] = {}  # buffer_id -> dtype
        self._metrics: List[VulkanMemoryMetrics] = []
        self._buffer_pool_size = 1024 * 1024 * 128  # 128MB default buffer pool

        try:
            # Initialize Vulkan instance and device
            self._init_vulkan()
        except Exception as e:
            raise VulkanMemoryError(f"Failed to initialize Vulkan: {e}")

    def _init_vulkan(self) -> None:
        """Initialize Vulkan instance and select physical device."""
        # Create Vulkan instance
        app_info = vk.VkApplicationInfo(
            sType=vk.VK_STRUCTURE_TYPE_APPLICATION_INFO,
            pApplicationName="AAT",
            applicationVersion=vk.VK_MAKE_VERSION(1, 0, 0),
            pEngineName="No Engine",
            engineVersion=vk.VK_MAKE_VERSION(1, 0, 0),
            apiVersion=vk.VK_API_VERSION_1_0,
        )

        create_info = vk.VkInstanceCreateInfo(
            sType=vk.VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO, pApplicationInfo=app_info
        )

        self._instance = vk.vkCreateInstance(create_info, None)

        # Get physical device
        physical_devices = vk.vkEnumeratePhysicalDevices(self._instance)
        if not physical_devices:
            raise VulkanMemoryError("No Vulkan devices found")

        self._physical_device = physical_devices[self._device_index]

        # Create logical device
        queue_create_info = vk.VkDeviceQueueCreateInfo(
            sType=vk.VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
            queueFamilyIndex=0,
            queueCount=1,
            pQueuePriorities=[1.0],
        )

        device_create_info = vk.VkDeviceCreateInfo(
            sType=vk.VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
            pQueueCreateInfos=[queue_create_info],
            queueCreateInfoCount=1,
        )

        self._device = vk.vkCreateDevice(
            self._physical_device, device_create_info, None
        )

    def allocate_buffer(
        self, size: Union[int, Tuple[int, ...]], dtype=np.float32
    ) -> Any:
        """Allocate a new buffer on Vulkan device with given size.

        Args:
            size: Buffer size in bytes or dimensions
            dtype: Buffer data type if size is dimensions

        Returns:
            Vulkan buffer

        Raises:
            VulkanMemoryError: If buffer allocation fails or size is invalid
        """
        try:
            # Validate size
            if isinstance(size, tuple):
                if any(s <= 0 for s in size):
                    raise VulkanMemoryError("Buffer dimensions must be positive")
                element_size = np.dtype(dtype).itemsize
                memory_size = element_size * np.prod(size)
            else:
                if size <= 0:
                    raise VulkanMemoryError("Buffer size must be positive")
                memory_size = size

            # Check if we need to clear buffer pool
            if (
                self._allocated_memory + memory_size
                > self._peak_memory + self._buffer_pool_size
            ):
                self._clear_buffer_pool()

            # Create buffer
            buffer_create_info = vk.VkBufferCreateInfo(
                sType=vk.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
                size=memory_size,
                usage=vk.VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
                sharingMode=vk.VK_SHARING_MODE_EXCLUSIVE,
            )

            try:
                buffer = vk.vkCreateBuffer(self._device, buffer_create_info, None)
            except Exception as e:
                raise VulkanMemoryError(f"Failed to create buffer: {e}")

            try:
                # Allocate memory
                mem_requirements = vk.vkGetBufferMemoryRequirements(
                    self._device, buffer
                )

                alloc_info = vk.VkMemoryAllocateInfo(
                    sType=vk.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
                    allocationSize=mem_requirements.size,
                    memoryTypeIndex=self._find_memory_type(
                        mem_requirements.memoryTypeBits,
                        vk.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
                        | vk.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
                    ),
                )

                memory = vk.vkAllocateMemory(self._device, alloc_info, None)

                # Bind memory to buffer
                vk.vkBindBufferMemory(self._device, buffer, memory, 0)

            except Exception as e:
                # Clean up buffer if memory allocation fails
                vk.vkDestroyBuffer(self._device, buffer, None)
                raise VulkanMemoryError(f"Failed to allocate memory: {e}")

            # Update tracking
            buffer_id = id(buffer)
            self._allocated_memory += memory_size
            self._peak_memory = max(self._peak_memory, self._allocated_memory)
            self._buffer_allocations[buffer_id] = memory_size
            self._buffer_memory[buffer_id] = memory

            # Record metrics
            self._metrics.append(
                VulkanMemoryMetrics(
                    allocated_memory=self._allocated_memory,
                    peak_memory=self._peak_memory,
                    fragmentation_ratio=self.get_fragmentation_ratio(),
                    buffer_memory=self.get_buffer_memory(),
                    operation_type="allocate",
                    device_index=self._device_index,
                )
            )

            return buffer

        except VulkanMemoryError:
            raise
        except Exception as e:
            raise VulkanMemoryError(f"Failed to allocate buffer: {e}")

    def transfer_to_device(self, host_array: np.ndarray) -> Any:
        """Transfer a host array to Vulkan device with memory tracking.

        Args:
            host_array: Array on host

        Returns:
            Vulkan buffer containing the data

        Raises:
            VulkanMemoryError: If transfer fails
        """
        try:
            # Create and allocate buffer
            buffer = self.allocate_buffer(host_array.shape, host_array.dtype)

            # Get memory handle
            memory = self._buffer_memory[id(buffer)]

            # Map memory
            data_ptr = vk.vkMapMemory(self._device, memory, 0, host_array.nbytes, 0)

            # Copy data
            data_ptr[: host_array.nbytes] = host_array.tobytes()

            # Unmap memory
            vk.vkUnmapMemory(self._device, memory)

            return buffer

        except Exception as e:
            # Cleanup on error
            if "buffer" in locals():
                self.free_buffer(buffer)
            raise VulkanMemoryError(f"Failed to transfer data to device: {e}")

    def transfer_to_host(
        self,
        device_buffer: Any,
        shape: Optional[Tuple[int, ...]] = None,
        dtype=np.float32,
    ) -> np.ndarray:
        """Transfer data from device buffer to host array.

        Args:
            device_buffer: Vulkan buffer to read from
            shape: Optional shape of output array
            dtype: Data type of output array

        Returns:
            NumPy array containing the data

        Raises:
            VulkanMemoryError: If transfer fails
        """
        try:
            # Get memory handle
            memory = self._buffer_memory.get(id(device_buffer))
            if memory is None:
                raise VulkanMemoryError("Invalid buffer")

            # Get memory requirements
            mem_requirements = vk.vkGetBufferMemoryRequirements(
                self._device, device_buffer
            )

            # Map memory
            data_ptr = vk.vkMapMemory(self._device, memory, 0, mem_requirements.size, 0)

            # Create a copy of the data
            data_size = mem_requirements.size
            if shape is not None:
                data_size = np.prod(shape) * np.dtype(dtype).itemsize
            data_bytes = bytes(data_ptr[:data_size])

            # Unmap memory
            vk.vkUnmapMemory(self._device, memory)

            # Create numpy array from the copy
            array_data = np.frombuffer(data_bytes, dtype=dtype)
            if shape is not None:
                array_data = array_data.reshape(
                    shape
                ).copy()  # Create a copy to ensure memory safety
            else:
                array_data = array_data.copy()  # Create a copy to ensure memory safety

            return array_data

        except Exception as e:
            raise VulkanMemoryError(f"Failed to transfer data from device: {e}")

    def free_buffer(self, buffer: Any) -> None:
        """Free a Vulkan buffer and its memory.

        Args:
            buffer: Buffer to free

        Raises:
            VulkanMemoryError: If buffer free fails or buffer is invalid
        """
        try:
            if buffer is None:
                raise VulkanMemoryError("Cannot free None buffer")

            # Extract buffer handle if we got a tuple
            if isinstance(buffer, tuple):
                buffer = buffer[0]

            buffer_id = id(buffer)

            # Get memory handle
            memory = self._buffer_memory.get(buffer_id)
            if memory is None:
                raise VulkanMemoryError("Invalid buffer: no associated memory found")

            try:
                # Free memory first
                vk.vkFreeMemory(self._device, memory, None)
                del self._buffer_memory[buffer_id]

                # Update tracking
                if buffer_id in self._buffer_allocations:
                    self._allocated_memory -= self._buffer_allocations[buffer_id]
                    del self._buffer_allocations[buffer_id]

                # Free buffer
                vk.vkDestroyBuffer(self._device, buffer, None)

            except Exception as e:
                raise VulkanMemoryError(f"Failed to free buffer resources: {e}")

        except VulkanMemoryError:
            raise
        except Exception as e:
            raise VulkanMemoryError(f"Failed to free buffer: {e}")

    def _find_memory_type(self, type_filter: int, properties: int) -> int:
        """Find suitable memory type index.

        Args:
            type_filter: Memory type bits
            properties: Required memory properties

        Returns:
            Memory type index

        Raises:
            VulkanMemoryError: If no suitable memory type found
        """
        try:
            mem_properties = vk.vkGetPhysicalDeviceMemoryProperties(
                self._physical_device
            )

            for i in range(mem_properties.memoryTypeCount):
                if (type_filter & (1 << i)) and (
                    mem_properties.memoryTypes[i].propertyFlags & properties
                ) == properties:
                    return i

            raise VulkanMemoryError("Failed to find suitable memory type")

        except Exception as e:
            raise VulkanMemoryError(f"Failed to find memory type: {e}")

    def get_allocated_memory(self) -> int:
        """Get current allocated memory in bytes."""
        return self._allocated_memory

    def get_peak_memory(self) -> int:
        """Get peak memory usage in bytes."""
        return self._peak_memory

    def get_buffer_memory(self) -> int:
        """Get current Vulkan buffer memory in bytes."""
        return sum(self._buffer_allocations.values())

    def get_fragmentation_ratio(self) -> float:
        """Calculate current memory fragmentation ratio.
        
        Returns:
            Ratio of wasted space between allocations (0.0 to 1.0)
        """
        if not self._buffer_allocations:
            return 0.0
            
        # Sort allocations by memory offset
        sorted_allocs = sorted(
            self._buffer_allocations.items(),
            key=lambda x: x[1]
        )
        
        # Calculate total gaps between allocations
        total_gaps = 0
        for i in range(len(sorted_allocs) - 1):
            current_end = sorted_allocs[i][1]
            next_start = sorted_allocs[i + 1][1]
            gap = next_start - current_end
            if gap > 0:
                total_gaps += gap
                
        return total_gaps / self._allocated_memory if self._allocated_memory > 0 else 0.0

    def optimize_memory_layout(self) -> None:
        """Optimize Vulkan memory layout to reduce fragmentation."""
        if not self._buffer_allocations:
            return

        # Get all buffers and their sizes
        buffers = []
        for buffer_id, size in self._buffer_allocations.items():
            buffer = None
            try:
                buffer = vk.vkGetBufferDeviceAddress(self._device, buffer_id)
                if buffer:
                    buffers.append((buffer, size))
            except:
                pass

        if not buffers:
            return

        # Sort buffers by size for better memory locality
        buffers.sort(key=lambda x: x[1], reverse=True)

        # TODO: Implement actual Vulkan buffer defragmentation
        # This would involve:
        # 1. Creating new buffers
        # 2. Copying data from old to new buffers
        # 3. Destroying old buffers
        # 4. Updating buffer references

    def _clear_buffer_pool(self) -> None:
        """Clear unused buffers from the pool."""
        # Identify buffers to free
        to_free = []
        for buffer_id, size in self._buffer_allocations.items():
            if buffer_id not in self._buffer_memory:
                to_free.append(buffer_id)
                
        # Free buffers
        for buffer_id in to_free:
            self._allocated_memory -= self._buffer_allocations[buffer_id]
            del self._buffer_allocations[buffer_id]
            
    def defragment_memory(self) -> None:
        """Defragment device memory by consolidating and reallocating buffers.
        
        This operation:
        1. Identifies fragmented memory regions
        2. Creates new contiguous allocations
        3. Copies data to new locations
        4. Frees old fragmented allocations
        
        Returns:
            None
            
        Raises:
            VulkanMemoryError: If defragmentation fails
        """
        try:
            # Get memory properties
            mem_properties = vk.vkGetPhysicalDeviceMemoryProperties(self._physical_device)
            
            # Get list of active buffers and their memory requirements
            active_buffers = []
            for buffer_id, memory in self._buffer_memory.items():
                if buffer_id in self._buffer_allocations:
                    size = self._buffer_allocations[buffer_id]
                    active_buffers.append((buffer_id, size, memory))
                    
            if not active_buffers:
                return
                
            # Sort buffers by size for optimal packing
            active_buffers.sort(key=lambda x: x[1], reverse=True)
            
            # Calculate total size needed
            total_size = sum(size for _, size, _ in active_buffers)
            
            # Allocate new contiguous memory block
            alloc_info = vk.VkMemoryAllocateInfo(
                sType=vk.VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
                allocationSize=total_size,
                memoryTypeIndex=self._find_memory_type(
                    0xFFFFFFFF,  # All memory types
                    vk.VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT
                    | vk.VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
                ),
            )
            
            new_memory = vk.vkAllocateMemory(self._device, alloc_info, None)
            
            # Create command pool and buffer for memory transfers
            cmd_pool_info = vk.VkCommandPoolCreateInfo(
                sType=vk.VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
                queueFamilyIndex=0,
            )
            cmd_pool = vk.vkCreateCommandPool(self._device, cmd_pool_info, None)
            
            cmd_buffer_info = vk.VkCommandBufferAllocateInfo(
                sType=vk.VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
                commandPool=cmd_pool,
                level=vk.VK_COMMAND_BUFFER_LEVEL_PRIMARY,
                commandBufferCount=1,
            )
            cmd_buffer = vk.vkAllocateCommandBuffers(self._device, cmd_buffer_info)[0]
            
            # Begin command buffer
            begin_info = vk.VkCommandBufferBeginInfo(
                sType=vk.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
                flags=vk.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT,
            )
            vk.vkBeginCommandBuffer(cmd_buffer, begin_info)
            
            # Copy data from old locations to new contiguous block
            offset = 0
            for buffer_id, size, old_memory in active_buffers:
                # Create staging buffer
                staging_info = vk.VkBufferCreateInfo(
                    sType=vk.VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
                    size=size,
                    usage=vk.VK_BUFFER_USAGE_TRANSFER_SRC_BIT | vk.VK_BUFFER_USAGE_TRANSFER_DST_BIT,
                    sharingMode=vk.VK_SHARING_MODE_EXCLUSIVE,
                )
                staging_buffer = vk.vkCreateBuffer(self._device, staging_info, None)
                
                # Bind staging buffer to new memory
                vk.vkBindBufferMemory(self._device, staging_buffer, new_memory, offset)
                
                # Copy memory
                copy_region = vk.VkBufferCopy(
                    srcOffset=0,
                    dstOffset=offset,
                    size=size,
                )
                vk.vkCmdCopyBuffer(cmd_buffer, staging_buffer, staging_buffer, 1, [copy_region])
                
                # Update tracking
                self._buffer_memory[buffer_id] = new_memory
                offset += size
                
                # Cleanup staging buffer
                vk.vkDestroyBuffer(self._device, staging_buffer, None)
                
            # End and submit command buffer
            vk.vkEndCommandBuffer(cmd_buffer)
            
            submit_info = vk.VkSubmitInfo(
                sType=vk.VK_STRUCTURE_TYPE_SUBMIT_INFO,
                commandBufferCount=1,
                pCommandBuffers=[cmd_buffer],
            )
            
            queue = vk.vkGetDeviceQueue(self._device, 0, 0)
            vk.vkQueueSubmit(queue, 1, [submit_info], None)
            vk.vkQueueWaitIdle(queue)
            
            # Cleanup
            vk.vkDestroyCommandPool(self._device, cmd_pool, None)
            
            # Free old memory blocks
            for _, _, old_memory in active_buffers:
                vk.vkFreeMemory(self._device, old_memory, None)
                
            # Update metrics
            self._metrics.append(
                VulkanMemoryMetrics(
                    allocated_memory=self._allocated_memory,
                    peak_memory=self._peak_memory,
                    fragmentation_ratio=0.0,  # After defrag, no fragmentation
                    buffer_memory=total_size,
                    operation_type="defragment",
                    device_index=self._device_index,
                )
            )
            
        except Exception as e:
            raise VulkanMemoryError(f"Failed to defragment memory: {e}")
            
    def copy_to_device(self, buffer: Any, data: np.ndarray) -> None:
        """Copy data from host to device buffer.

        Args:
            buffer: Vulkan buffer to copy to
            data: NumPy array containing data to copy

        Raises:
            VulkanMemoryError: If copy fails
        """
        try:
            # Get memory handle
            memory = self._buffer_memory.get(id(buffer))
            if memory is None:
                raise VulkanMemoryError("Invalid buffer")

            # Map memory
            data_ptr = vk.vkMapMemory(self._device, memory, 0, data.nbytes, 0)

            # Copy data
            data_ptr[: data.nbytes] = data.tobytes()

            # Store array shape and dtype for later
            self._buffer_shapes[id(buffer)] = data.shape
            self._buffer_dtypes[id(buffer)] = data.dtype

            # Unmap memory
            vk.vkUnmapMemory(self._device, memory)

        except Exception as e:
            raise VulkanMemoryError(f"Failed to copy data to device: {e}")

    def copy_to_host(self, buffer: Any) -> np.ndarray:
        """Copy data from device buffer to host.

        Args:
            buffer: Vulkan buffer to copy from

        Returns:
            NumPy array containing the copied data

        Raises:
            VulkanMemoryError: If copy fails
        """
        try:
            # Get memory handle and buffer size
            buffer_id = id(buffer)
            memory = self._buffer_memory.get(buffer_id)
            if memory is None:
                raise VulkanMemoryError("Invalid buffer")

            size = self._buffer_allocations.get(buffer_id)
            if size is None:
                raise VulkanMemoryError("Buffer size not found")

            # Get shape and dtype
            shape = self._buffer_shapes.get(buffer_id)
            dtype = self._buffer_dtypes.get(buffer_id, np.float32)

            # Map memory
            data_ptr = vk.vkMapMemory(self._device, memory, 0, size, 0)

            # Copy data
            data_bytes = bytes(data_ptr[:size])

            # Unmap memory
            vk.vkUnmapMemory(self._device, memory)

            # Create numpy array from bytes with correct shape
            array_data = np.frombuffer(data_bytes, dtype=dtype)
            if shape is not None:
                array_data = array_data.reshape(shape)

            return array_data

        except Exception as e:
            raise VulkanMemoryError(f"Failed to copy data from device: {e}")

    def get_memory_usage(self) -> int:
        """Get current memory usage in bytes.

        Returns:
            Current allocated memory in bytes
        """
        return self.get_allocated_memory()

    def cleanup_pool(self) -> None:
        """Clean up the buffer pool and reclaim memory."""
        try:
            # Get list of buffers to clean up
            buffer_ids = list(self._buffer_allocations.keys())
            for buffer_id in buffer_ids:
                try:
                    # Skip buffers that should be kept
                    if buffer_id in self._buffer_memory:
                        continue
                    # Free buffer memory
                    memory = self._buffer_memory[buffer_id]
                    vk.vkFreeMemory(self._device, memory, None)
                    del self._buffer_memory[buffer_id]
                    del self._buffer_allocations[buffer_id]
                    if buffer_id in self._buffer_shapes:
                        del self._buffer_shapes[buffer_id]
                    if buffer_id in self._buffer_dtypes:
                        del self._buffer_dtypes[buffer_id]
                except:
                    pass

        except Exception as e:
            raise VulkanMemoryError(f"Failed to cleanup buffer pool: {e}")

    def is_buffer_valid(self, buffer: Any) -> bool:
        """Check if a buffer is valid and can be used.

        Args:
            buffer: Vulkan buffer to check

        Returns:
            True if buffer is valid, False otherwise
        """
        if buffer is None:
            return False

        buffer_id = id(buffer)
        return buffer_id in self._buffer_allocations and buffer_id in self._buffer_memory

    def cleanup(self) -> None:
        """Clean up Vulkan resources."""
        try:
            # Clear buffer pool first
            try:
                self._clear_buffer_pool()
            except:
                pass

            # Then destroy device and instance
            if hasattr(self, "_device"):
                try:
                    vk.vkDeviceWaitIdle(self._device)
                    vk.vkDestroyDevice(self._device, None)
                    delattr(self, "_device")
                except:
                    pass

            if hasattr(self, "_instance"):
                try:
                    vk.vkDestroyInstance(self._instance, None)
                    delattr(self, "_instance")
                except:
                    pass

        except Exception as e:
            raise VulkanMemoryError(f"Failed to cleanup: {e}")

    def __del__(self):
        """Cleanup when manager is destroyed."""
        try:
            self.cleanup()
        except:
            pass
