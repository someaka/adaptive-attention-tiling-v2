#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// Bindings for input/output buffers
layout(set = 0, binding = 0) buffer MetricBuffer {
    float metric[];
};

layout(set = 0, binding = 1) buffer ConnectionBuffer {
    float connection[];
};

layout(set = 0, binding = 2) buffer OutputBuffer {
    float output[];
};

// Push constants for dynamic parameters
layout(push_constant) uniform PushConstants {
    uint batch_size;
    uint manifold_dim;
    float flow_rate;
} params;

// Helper function for matrix multiplication
float compute_ricci_component(uint i, uint j, uint k) {
    float sum = 0.0;
    uint stride = params.manifold_dim;
    uint batch_offset = gl_GlobalInvocationID.z * stride * stride;
    
    for (uint l = 0; l < params.manifold_dim; l++) {
        sum += metric[batch_offset + i * stride + l] * 
               connection[batch_offset + l * stride + j * stride + k];
    }
    return sum;
}

void main() {
    // Get global position
    uint i = gl_GlobalInvocationID.x;
    uint j = gl_GlobalInvocationID.y;
    uint batch_idx = gl_GlobalInvocationID.z;
    
    // Check bounds
    if (i >= params.manifold_dim || j >= params.manifold_dim || 
        batch_idx >= params.batch_size) {
        return;
    }
    
    // Calculate Ricci tensor component
    float ricci = 0.0;
    for (uint k = 0; k < params.manifold_dim; k++) {
        ricci += compute_ricci_component(i, j, k);
    }
    
    // Apply Ricci flow
    uint idx = (batch_idx * params.manifold_dim + i) * params.manifold_dim + j;
    output[idx] = -2.0 * ricci * params.flow_rate;
}
