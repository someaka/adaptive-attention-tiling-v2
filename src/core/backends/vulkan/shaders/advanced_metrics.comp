#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_atomic_float : require

#include "shader_common.glsl"

layout(local_size_x = 256) in;

// Input/output buffers
layout(set = 0, binding = 0) buffer HeadStates {
    PRECISION head_states[];  // [batch, num_heads, seq_len, head_dim]
};

layout(set = 0, binding = 1) buffer AdvancedMetrics {
    // [head_coupling, routing_scores, temporal_evolution, pattern_emergence]
    PRECISION advanced_metrics[];
};

layout(set = 0, binding = 2) buffer RoutingGraph {
    PRECISION routing_edges[];  // Dynamic routing graph
};

layout(set = 0, binding = 3) buffer TemporalCache {
    PRECISION temporal_states[];  // Previous states for temporal analysis
};

// Push constants
layout(push_constant) uniform PushConstants {
    uint batch_size;
    uint seq_len;
    uint num_heads;
    uint head_dim;
    float temperature;
    float time_scale;
} pc;

shared PRECISION local_states[32][32];
shared PRECISION head_similarities[32][32];
shared PRECISION routing_scores[32];

// Compute coupling between attention heads
PRECISION compute_head_coupling(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    PRECISION coupling = 0.0;
    
    // Load head states
    if (local_idx < pc.head_dim) {
        for (uint other_head = 0; other_head < pc.num_heads; other_head++) {
            if (other_head != head_idx) {
                VEC_TYPE curr_head = vector_load(head_states, 
                    head_idx * pc.seq_len * pc.head_dim + local_idx);
                VEC_TYPE other_head_state = vector_load(head_states,
                    other_head * pc.seq_len * pc.head_dim + local_idx);
                
                // Compute cosine similarity
                PRECISION similarity = dot(curr_head, other_head_state) /
                    (length(curr_head) * length(other_head_state) + 1e-6);
                
                atomicAdd(head_similarities[head_idx][other_head], similarity);
            }
        }
    }
    barrier();
    
    // Compute final coupling score
    if (local_idx == 0) {
        for (uint other_head = 0; other_head < pc.num_heads; other_head++) {
            if (other_head != head_idx) {
                coupling += abs(head_similarities[head_idx][other_head]);
            }
        }
        coupling /= float(pc.num_heads - 1);
    }
    
    return coupling;
}

// Compute dynamic routing scores
void compute_routing_scores(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    // Initialize routing scores
    if (local_idx < pc.seq_len) {
        routing_scores[local_idx] = 0.0;
        
        // Compute path importance using attention gradients
        VEC_TYPE state = vector_load(head_states,
            head_idx * pc.seq_len * pc.head_dim + local_idx * VECTOR_WIDTH);
        
        // Identify information bottlenecks
        PRECISION bottleneck = 0.0;
        for (uint i = 0; i < VECTOR_WIDTH; i++) {
            bottleneck = max(bottleneck, abs(state[i]));
        }
        
        routing_scores[local_idx] = bottleneck;
    }
    barrier();
    
    // Update routing graph
    if (local_idx == 0) {
        uint graph_offset = head_idx * pc.seq_len;
        for (uint i = 0; i < pc.seq_len; i++) {
            routing_edges[graph_offset + i] = routing_scores[i];
        }
    }
}

// Analyze temporal evolution of attention patterns
PRECISION compute_temporal_evolution(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    PRECISION evolution_score = 0.0;
    
    if (local_idx < pc.seq_len) {
        // Load current and previous states
        VEC_TYPE curr_state = vector_load(head_states,
            head_idx * pc.seq_len * pc.head_dim + local_idx * VECTOR_WIDTH);
        VEC_TYPE prev_state = vector_load(temporal_states,
            head_idx * pc.seq_len * pc.head_dim + local_idx * VECTOR_WIDTH);
        
        // Compute state transition velocity
        PRECISION velocity = length(curr_state - prev_state) / pc.time_scale;
        
        // Detect pattern emergence
        PRECISION pattern_strength = length(curr_state) / length(prev_state + 1e-6);
        
        evolution_score = velocity * pattern_strength;
        
        // Update temporal cache
        vector_store(temporal_states,
            head_idx * pc.seq_len * pc.head_dim + local_idx * VECTOR_WIDTH,
            curr_state);
    }
    
    return reduce_sum_subgroup(evolution_score) / float(pc.seq_len);
}

// Detect emerging attention patterns
PRECISION detect_patterns(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    PRECISION pattern_score = 0.0;
    
    if (local_idx < pc.seq_len) {
        // Load sequence of states
        VEC_TYPE state_seq[3];  // Look at 3 consecutive states
        for (uint i = 0; i < 3; i++) {
            if (local_idx + i < pc.seq_len) {
                state_seq[i] = vector_load(head_states,
                    head_idx * pc.seq_len * pc.head_dim + (local_idx + i) * VECTOR_WIDTH);
            }
        }
        
        // Detect repeating patterns
        PRECISION similarity_12 = dot(state_seq[0], state_seq[1]) /
            (length(state_seq[0]) * length(state_seq[1]) + 1e-6);
        PRECISION similarity_23 = dot(state_seq[1], state_seq[2]) /
            (length(state_seq[1]) * length(state_seq[2]) + 1e-6);
        
        // Pattern emergence score
        pattern_score = similarity_12 * similarity_23;
    }
    
    return reduce_sum_subgroup(pattern_score) / float(pc.seq_len);
}

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    uint head_idx = global_idx % pc.num_heads;
    
    if (head_idx >= pc.num_heads) return;
    
    // Compute advanced metrics
    PRECISION head_coupling = compute_head_coupling(head_idx);
    compute_routing_scores(head_idx);
    PRECISION temporal_evolution = compute_temporal_evolution(head_idx);
    PRECISION pattern_emergence = detect_patterns(head_idx);
    
    // Store metrics
    if (gl_LocalInvocationID.x == 0) {
        uint metric_offset = head_idx * 4;
        advanced_metrics[metric_offset + 0] = head_coupling;
        advanced_metrics[metric_offset + 1] = routing_scores[0];  // Use first routing score
        advanced_metrics[metric_offset + 2] = temporal_evolution;
        advanced_metrics[metric_offset + 3] = pattern_emergence;
    }
}
