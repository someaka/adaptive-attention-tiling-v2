#version 460
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : require

layout(local_size_x = 256) in;

// Push constants
layout(push_constant) uniform PushConstants {
    uint num_tiles;
    uint tile_size;
    uint d_model;
    float flow_threshold;
} pc;

// Storage buffers
layout(set = 0, binding = 0) buffer TileStates {
    float16_t data[];
} tile_states;

layout(set = 0, binding = 1) buffer TileResolutions {
    float data[];
} tile_resolutions;

layout(set = 0, binding = 2) buffer CrossTileFlow {
    float16_t data[];
} cross_tile_flow;

// Shared memory for efficient routing
shared float16_t shared_states[gl_WorkGroupSize.x];
shared float shared_resolutions[gl_WorkGroupSize.x];

// Compute routing weights based on resolution ratios
float compute_routing_weight(float source_res, float target_res) {
    float ratio = source_res / target_res;
    return 1.0 / (1.0 + abs(1.0 - ratio));
}

// Route information between adjacent tiles
void route_information(uint tile_idx) {
    // Load tile data into shared memory
    uint local_idx = gl_LocalInvocationID.x;
    if (local_idx < pc.tile_size) {
        shared_states[local_idx] = tile_states.data[tile_idx * pc.tile_size + local_idx];
        shared_resolutions[local_idx] = tile_resolutions.data[tile_idx];
    }
    barrier();
    
    // Skip first and last tiles (boundary conditions)
    if (tile_idx == 0 || tile_idx >= pc.num_tiles - 1) return;
    
    // Compute routing weights
    float source_res = tile_resolutions.data[tile_idx];
    float target_res = tile_resolutions.data[tile_idx + 1];
    float routing_weight = compute_routing_weight(source_res, target_res);
    
    // Route information if above threshold
    if (routing_weight > pc.flow_threshold) {
        uint target_offset = (tile_idx + 1) * pc.tile_size;
        
        // Compute weighted contribution
        float16_t contribution = shared_states[local_idx] * float16_t(routing_weight);
        
        // Store in cross-tile flow buffer
        cross_tile_flow.data[tile_idx * pc.tile_size + local_idx] = contribution;
    }
}

void main() {
    uint tile_idx = gl_GlobalInvocationID.x / pc.tile_size;
    if (tile_idx >= pc.num_tiles) return;
    
    route_information(tile_idx);
}
