#version 460
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference2 : require

// Precision settings for optimal performance
layout(local_size_x = 256) in;

// Shared memory for tile processing
shared float16_t shared_states[gl_WorkGroupSize.x];
shared float16_t shared_density[gl_WorkGroupSize.x];

// Push constants for dynamic parameters
layout(push_constant) uniform PushConstants {
    uint sequence_length;
    uint d_model;
    uint d_state;
    float min_resolution;
    float density_threshold;
} pc;

// Storage buffers
layout(set = 0, binding = 0) buffer InputBuffer {
    float16_t data[];
} input_buffer;

layout(set = 0, binding = 1) buffer StateBuffer {
    float16_t data[];
} state_buffer;

layout(set = 0, binding = 2) buffer DensityBuffer {
    float16_t data[];
} density_buffer;

layout(set = 0, binding = 3) buffer OutputBuffer {
    float16_t data[];
} output_buffer;

// Information density computation
float compute_local_density(uint idx) {
    float16_t sum = 0.0hf;
    const uint window = 8; // Adjustable window size
    
    for (uint i = max(0, idx - window); i < min(pc.sequence_length, idx + window); i++) {
        float16_t diff = abs(shared_states[i % gl_WorkGroupSize.x] - shared_states[idx % gl_WorkGroupSize.x]);
        sum += diff;
    }
    
    return float(sum) / float(2 * window);
}

// State space processing with variable resolution
void process_state_space(uint idx) {
    // Load state into shared memory
    shared_states[gl_LocalInvocationID.x] = state_buffer.data[idx];
    barrier();
    
    // Compute local information density
    float density = compute_local_density(idx);
    shared_density[gl_LocalInvocationID.x] = density;
    barrier();
    
    // Adapt resolution based on density
    float resolution = max(pc.min_resolution, 
                         min(1.0, density / pc.density_threshold));
    
    // Compute effective state dimension
    uint effective_d_state = uint(float(pc.d_state) * resolution);
    
    // Process with adapted resolution
    float16_t result = 0.0hf;
    for (uint i = 0; i < effective_d_state; i++) {
        result += shared_states[gl_LocalInvocationID.x] * 
                 state_buffer.data[idx * pc.d_state + i];
    }
    
    // Store result
    output_buffer.data[idx] = result;
    density_buffer.data[idx] = float16_t(density);
}

void main() {
    // Calculate global index
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= pc.sequence_length) return;
    
    // Main processing
    process_state_space(idx);
}
