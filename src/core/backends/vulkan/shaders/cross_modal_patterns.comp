#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_atomic_float : require

#include "shader_common.glsl"

layout(local_size_x = 256) in;

// Input/output buffers
layout(set = 0, binding = 0) buffer ModalStates {
    PRECISION modal_states[];  // [num_modalities][batch, heads, seq_len, dim]
};

layout(set = 0, binding = 1) buffer CrossModalPatterns {
    PRECISION patterns[];  // [num_patterns][pattern_dim]
};

layout(set = 0, binding = 2) buffer PatternStrengths {
    PRECISION strengths[];  // [num_modalities][num_patterns]
};

layout(set = 0, binding = 3) buffer ModalityGraph {
    PRECISION modality_edges[];  // Cross-modality information flow
};

// Push constants
layout(push_constant) uniform PushConstants {
    uint num_modalities;
    uint pattern_dim;
    uint seq_len;
    uint head_dim;
    float pattern_threshold;
    float coupling_strength;
} pc;

shared PRECISION modal_cache[32][32];
shared PRECISION pattern_cache[32][32];
shared PRECISION similarity_matrix[32][32];

// Compute cross-modal pattern similarity
PRECISION compute_pattern_similarity(uint pattern_idx, uint modality_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    PRECISION similarity = 0.0;
    
    // Load pattern and modality state into shared memory
    if (local_idx < pc.pattern_dim) {
        pattern_cache[0][local_idx] = patterns[pattern_idx * pc.pattern_dim + local_idx];
        
        for (uint i = 0; i < pc.seq_len; i++) {
            uint state_idx = modality_idx * pc.seq_len * pc.head_dim + 
                           i * pc.head_dim + local_idx;
            modal_cache[i][local_idx] = modal_states[state_idx];
        }
    }
    barrier();
    
    // Compute similarity using attention-like mechanism
    if (local_idx < pc.seq_len) {
        VEC_TYPE pattern_vec = vector_load(pattern_cache[0], local_idx * VECTOR_WIDTH);
        VEC_TYPE state_vec = vector_load(modal_cache[local_idx], 0);
        
        similarity = dot(pattern_vec, state_vec) / 
                    (length(pattern_vec) * length(state_vec) + 1e-6);
    }
    
    return reduce_max_subgroup(similarity);
}

// Detect emerging cross-modal patterns
void detect_patterns(uint modality_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    // Initialize pattern strengths
    if (local_idx < pc.pattern_dim) {
        strengths[modality_idx * pc.pattern_dim + local_idx] = 0.0;
    }
    barrier();
    
    // Compute pattern similarities across modalities
    for (uint pattern_idx = 0; pattern_idx < pc.pattern_dim; pattern_idx++) {
        PRECISION similarity = compute_pattern_similarity(pattern_idx, modality_idx);
        
        if (local_idx == 0 && similarity > pc.pattern_threshold) {
            atomicAdd(strengths[modality_idx * pc.pattern_dim + pattern_idx], similarity);
        }
    }
}

// Update modality coupling graph
void update_modality_graph(uint modality_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    if (local_idx >= pc.num_modalities) return;
    
    // Skip self-connection
    if (local_idx == modality_idx) return;
    
    // Compute cross-modal coupling
    PRECISION coupling = 0.0;
    for (uint i = 0; i < pc.pattern_dim; i++) {
        PRECISION strength_a = strengths[modality_idx * pc.pattern_dim + i];
        PRECISION strength_b = strengths[local_idx * pc.pattern_dim + i];
        
        coupling += strength_a * strength_b;
    }
    
    // Update modality graph
    uint edge_idx = modality_idx * pc.num_modalities + local_idx;
    modality_edges[edge_idx] = coupling * pc.coupling_strength;
}

// Extract new patterns from strong cross-modal activations
void extract_patterns(uint modality_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    if (local_idx >= pc.pattern_dim) return;
    
    // Find strongest activations
    PRECISION max_strength = 0.0;
    uint max_seq_idx = 0;
    
    for (uint i = 0; i < pc.seq_len; i++) {
        uint state_idx = modality_idx * pc.seq_len * pc.head_dim + 
                        i * pc.head_dim + local_idx;
        PRECISION strength = length(vector_load(modal_states, state_idx));
        
        if (strength > max_strength) {
            max_strength = strength;
            max_seq_idx = i;
        }
    }
    
    // Extract pattern if strong enough
    if (max_strength > pc.pattern_threshold) {
        uint pattern_idx = atomicAdd(patterns[pc.pattern_dim * pc.pattern_dim], 1.0);
        if (pattern_idx < pc.pattern_dim) {
            uint state_idx = modality_idx * pc.seq_len * pc.head_dim + 
                            max_seq_idx * pc.head_dim + local_idx;
            patterns[pattern_idx * pc.pattern_dim + local_idx] = 
                modal_states[state_idx] / max_strength;  // Normalize pattern
        }
    }
}

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    uint modality_idx = global_idx % pc.num_modalities;
    
    if (modality_idx >= pc.num_modalities) return;
    
    // Process cross-modal patterns
    detect_patterns(modality_idx);
    barrier();
    
    // Update modality coupling
    update_modality_graph(modality_idx);
    barrier();
    
    // Extract new patterns
    extract_patterns(modality_idx);
}
