#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_atomic_float : require

#include "shader_common.glsl"

layout(local_size_x = 256) in;

// Input/output buffers
layout(set = 0, binding = 0) buffer TileStates {
    PRECISION states[];
};

layout(set = 0, binding = 1) buffer TileMetrics {
    PRECISION metrics[];  // [entropy, cross_flow, temporal_coherence, sparsity]
};

layout(set = 0, binding = 2) buffer FlowGraph {
    PRECISION flow_edges[];  // Cross-tile information flow graph
};

// Push constants
layout(push_constant) uniform PushConstants {
    uint seq_len;
    uint num_heads;
    uint head_dim;
    uint tile_size;
    uint num_tiles;
    float temperature;
} pc;

shared PRECISION local_states[32][32];
shared PRECISION local_metrics[4];  // Per-tile metrics accumulator

// Compute Shannon entropy for a tile
PRECISION compute_entropy(uint tile_idx, uint head_idx) {
    uint base_idx = tile_idx * pc.tile_size + head_idx * pc.seq_len * pc.head_dim;
    PRECISION entropy = 0.0;
    
    // Load tile states into shared memory
    uint local_idx = gl_LocalInvocationID.x;
    if (local_idx < pc.tile_size) {
        for (uint i = 0; i < pc.tile_size; i++) {
            local_states[local_idx][i] = states[base_idx + local_idx * pc.tile_size + i];
        }
    }
    barrier();
    
    // Compute probability distribution
    if (local_idx < pc.tile_size) {
        PRECISION sum = 0.0;
        PRECISION max_val = -1e9;
        
        // Find max for numerical stability
        for (uint i = 0; i < pc.tile_size; i++) {
            max_val = max(max_val, local_states[local_idx][i]);
        }
        
        // Compute softmax
        for (uint i = 0; i < pc.tile_size; i++) {
            PRECISION p = exp((local_states[local_idx][i] - max_val) / pc.temperature);
            sum += p;
            local_states[local_idx][i] = p;
        }
        
        // Normalize and compute entropy
        for (uint i = 0; i < pc.tile_size; i++) {
            PRECISION p = local_states[local_idx][i] / sum;
            if (p > 1e-7) {  // Numerical stability
                entropy -= p * log2(p);
            }
        }
    }
    
    // Reduce entropy across tile
    return reduce_sum_subgroup(entropy) / float(pc.tile_size);
}

// Compute cross-tile information flow
PRECISION compute_cross_flow(uint tile_idx, uint head_idx) {
    uint base_idx = tile_idx * pc.tile_size + head_idx * pc.seq_len * pc.head_dim;
    PRECISION flow = 0.0;
    
    // Load current and adjacent tile states
    uint local_idx = gl_LocalInvocationID.x;
    if (local_idx < pc.tile_size) {
        // Load current tile
        VEC_TYPE curr = vector_load(states, base_idx + local_idx * VECTOR_WIDTH);
        
        // Load adjacent tiles if they exist
        if (tile_idx > 0) {
            VEC_TYPE prev = vector_load(states, base_idx - pc.tile_size + local_idx * VECTOR_WIDTH);
            flow += length(curr - prev);
        }
        
        if (tile_idx < pc.num_tiles - 1) {
            VEC_TYPE next = vector_load(states, base_idx + pc.tile_size + local_idx * VECTOR_WIDTH);
            flow += length(curr - next);
        }
    }
    
    return reduce_sum_subgroup(flow) / float(pc.tile_size);
}

// Compute temporal coherence
PRECISION compute_temporal_coherence(uint tile_idx, uint head_idx) {
    uint base_idx = tile_idx * pc.tile_size + head_idx * pc.seq_len * pc.head_dim;
    PRECISION coherence = 0.0;
    
    uint local_idx = gl_LocalInvocationID.x;
    if (local_idx < pc.tile_size - 1) {
        VEC_TYPE curr = vector_load(states, base_idx + local_idx * VECTOR_WIDTH);
        VEC_TYPE next = vector_load(states, base_idx + (local_idx + 1) * VECTOR_WIDTH);
        
        // Compute temporal derivative
        coherence = 1.0 / (1.0 + length(next - curr));
    }
    
    return reduce_sum_subgroup(coherence) / float(pc.tile_size - 1);
}

// Compute sparsity metric
PRECISION compute_sparsity(uint tile_idx, uint head_idx) {
    uint base_idx = tile_idx * pc.tile_size + head_idx * pc.seq_len * pc.head_dim;
    PRECISION sparsity = 0.0;
    
    uint local_idx = gl_LocalInvocationID.x;
    if (local_idx < pc.tile_size) {
        VEC_TYPE state = vector_load(states, base_idx + local_idx * VECTOR_WIDTH);
        
        // L1/L0 pseudo-norm for sparsity
        PRECISION l1 = abs(state.x) + abs(state.y) + abs(state.z) + abs(state.w);
        PRECISION l0 = float(abs(state.x) > 1e-7) + float(abs(state.y) > 1e-7) +
                      float(abs(state.z) > 1e-7) + float(abs(state.w) > 1e-7);
        
        sparsity = l1 / (l0 + 1e-7);
    }
    
    return reduce_sum_subgroup(sparsity) / float(pc.tile_size);
}

// Update flow graph edges
void update_flow_graph(uint tile_idx, uint head_idx, PRECISION flow) {
    if (gl_LocalInvocationID.x == 0) {
        uint edge_idx = tile_idx + head_idx * pc.num_tiles;
        
        // Update incoming edges
        if (tile_idx > 0) {
            flow_edges[edge_idx - 1] = flow;
        }
        
        // Update outgoing edges
        if (tile_idx < pc.num_tiles - 1) {
            flow_edges[edge_idx] = flow;
        }
    }
}

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    uint head_idx = global_idx / pc.num_tiles;
    uint tile_idx = global_idx % pc.num_tiles;
    
    if (head_idx >= pc.num_heads) return;
    
    // Compute information metrics
    PRECISION entropy = compute_entropy(tile_idx, head_idx);
    PRECISION cross_flow = compute_cross_flow(tile_idx, head_idx);
    PRECISION temporal_coherence = compute_temporal_coherence(tile_idx, head_idx);
    PRECISION sparsity = compute_sparsity(tile_idx, head_idx);
    
    // Store metrics
    if (gl_LocalInvocationID.x == 0) {
        uint metric_idx = (tile_idx + head_idx * pc.num_tiles) * 4;
        metrics[metric_idx + 0] = entropy;
        metrics[metric_idx + 1] = cross_flow;
        metrics[metric_idx + 2] = temporal_coherence;
        metrics[metric_idx + 3] = sparsity;
    }
    
    // Update flow graph
    update_flow_graph(tile_idx, head_idx, cross_flow);
}
