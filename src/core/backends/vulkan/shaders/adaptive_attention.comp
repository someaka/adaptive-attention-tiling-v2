#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_atomic_float : require

#include "shader_common.glsl"

layout(local_size_x = 256) in;

// Input/output buffers
layout(set = 0, binding = 0) buffer Queries {
    PRECISION queries[];
};

layout(set = 0, binding = 1) buffer Keys {
    PRECISION keys[];
};

layout(set = 0, binding = 2) buffer Values {
    PRECISION values[];
};

layout(set = 0, binding = 3) buffer Output {
    PRECISION output[];
};

layout(set = 0, binding = 4) buffer TileMetrics {
    PRECISION metrics[];  // Information density per tile
};

// Push constants
layout(push_constant) uniform PushConstants {
    uint seq_len;        // Sequence length
    uint num_heads;      // Number of attention heads
    uint head_dim;       // Dimension per head
    uint tile_size;      // Base tile size
    float resolution;    // Target computational resolution
    float density_threshold; // Threshold for information density
} pc;

shared PRECISION tile_cache[32][32];    // Shared memory tile cache
shared PRECISION local_metrics[32];      // Local tile metrics

// Compute information density for a tile
PRECISION compute_density(uint tile_idx, uint head_idx) {
    uint base_idx = (tile_idx * pc.tile_size) + (head_idx * pc.seq_len * pc.head_dim);
    PRECISION density = 0.0;
    
    // Compute gradient of information flow
    for (uint i = 0; i < pc.tile_size - 1; i++) {
        VEC_TYPE curr = vector_load(queries, base_idx + i * VECTOR_WIDTH);
        VEC_TYPE next = vector_load(queries, base_idx + (i + 1) * VECTOR_WIDTH);
        density += length(next - curr);
    }
    
    // Normalize by tile size
    return density / float(pc.tile_size);
}

// Compute adaptive tile size based on information density
uint get_adaptive_tile_size(PRECISION density) {
    // Dynamic resolution scaling based on information density
    float scale = 1.0 + (1.0 - min(density / pc.density_threshold, 1.0)) * (1.0 / pc.resolution - 1.0);
    return uint(float(pc.tile_size) * scale);
}

// Process attention for a single tile
void process_tile(uint tile_idx, uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    uint global_idx = gl_GlobalInvocationID.x;
    
    // Compute base indices
    uint q_offset = tile_idx * pc.tile_size + head_idx * pc.seq_len * pc.head_dim;
    uint k_offset = head_idx * pc.seq_len * pc.head_dim;
    uint v_offset = head_idx * pc.seq_len * pc.head_dim;
    
    // Load tile metrics
    PRECISION density = compute_density(tile_idx, head_idx);
    if (local_idx == 0) {
        metrics[tile_idx + head_idx * (pc.seq_len / pc.tile_size)] = density;
    }
    
    // Get adaptive tile size
    uint adaptive_size = get_adaptive_tile_size(density);
    
    // Load query tile into shared memory
    if (local_idx < pc.tile_size) {
        for (uint i = 0; i < pc.head_dim; i += VECTOR_WIDTH) {
            VEC_TYPE q = vector_load(queries, q_offset + local_idx * pc.head_dim + i);
            vector_store(tile_cache[local_idx], i, q);
        }
    }
    barrier();
    
    // Process with adaptive resolution
    PRECISION scale = 1.0 / sqrt(float(pc.head_dim));
    uint step = max(1u, uint(float(adaptive_size) / float(pc.tile_size)));
    
    for (uint i = 0; i < adaptive_size; i += step) {
        // Load key and value vectors
        VEC_TYPE k, v;
        if (i + local_idx < adaptive_size) {
            k = vector_load(keys, k_offset + i * pc.head_dim);
            v = vector_load(values, v_offset + i * pc.head_dim);
        }
        
        // Compute attention scores
        PRECISION score = 0.0;
        for (uint j = 0; j < pc.head_dim; j += VECTOR_WIDTH) {
            VEC_TYPE q = vector_load(tile_cache[local_idx], j);
            score += dot(q, k) * scale;
        }
        
        // Apply softmax (simplified for now)
        score = exp(score);
        
        // Accumulate weighted values
        VEC_TYPE acc = VEC_TYPE(0.0);
        for (uint j = 0; j < pc.head_dim; j += VECTOR_WIDTH) {
            acc = fma(v, VEC_TYPE(score), acc);
        }
        
        // Store result with atomic add for thread safety
        uint out_idx = q_offset + local_idx * pc.head_dim;
        atomicAdd(output[out_idx], acc.x);
        atomicAdd(output[out_idx + 1], acc.y);
        atomicAdd(output[out_idx + 2], acc.z);
        atomicAdd(output[out_idx + 3], acc.w);
    }
}

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    uint head_idx = global_idx / (pc.seq_len / pc.tile_size);
    uint tile_idx = global_idx % (pc.seq_len / pc.tile_size);
    
    if (head_idx >= pc.num_heads) return;
    
    process_tile(tile_idx, head_idx);
}
