#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_atomic_float : require

#include "shader_common.glsl"

layout(local_size_x = 256) in;

// Input/output buffers
layout(set = 0, binding = 0) buffer HeadStates {
    PRECISION head_states[];  // [batch, heads, seq_len, dim]
};

layout(set = 0, binding = 1) buffer RoutingGraph {
    PRECISION routing_edges[];  // Dynamic routing graph
};

layout(set = 0, binding = 2) buffer PathImportance {
    PRECISION path_scores[];  // Importance scores for routing paths
};

layout(set = 0, binding = 3) buffer OptimizedRoutes {
    PRECISION optimized_paths[];  // Optimized routing decisions
};

// Push constants
layout(push_constant) uniform PushConstants {
    uint num_heads;
    uint seq_len;
    uint head_dim;
    float importance_threshold;
    float routing_temperature;
    float exploration_rate;
} pc;

shared PRECISION local_scores[32][32];
shared PRECISION path_cache[32][32];
shared PRECISION importance_cache[32];

// Compute path importance using attention gradients
PRECISION compute_path_importance(uint head_idx, uint path_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    PRECISION importance = 0.0;
    
    if (local_idx < pc.head_dim) {
        // Load states for path
        VEC_TYPE state = vector_load(head_states,
            head_idx * pc.seq_len * pc.head_dim + path_idx * pc.head_dim);
        
        // Compute gradient-based importance
        importance = length(state);
        
        // Add exploration bonus
        if (importance > pc.importance_threshold) {
            importance += pc.exploration_rate * 
                random(vec2(head_idx, path_idx));  // Controlled exploration
        }
    }
    
    return reduce_sum_subgroup(importance) / float(pc.head_dim);
}

// Update routing graph based on importance scores
void update_routing_graph(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    if (local_idx >= pc.seq_len) return;
    
    // Load importance scores
    importance_cache[local_idx] = path_scores[head_idx * pc.seq_len + local_idx];
    
    // Apply temperature scaling
    PRECISION scaled_importance = importance_cache[local_idx] / pc.routing_temperature;
    
    // Update routing edges with softmax normalization
    PRECISION max_importance = reduce_max_subgroup(scaled_importance);
    PRECISION exp_importance = exp(scaled_importance - max_importance);
    PRECISION sum_exp = reduce_sum_subgroup(exp_importance);
    
    routing_edges[head_idx * pc.seq_len + local_idx] = exp_importance / sum_exp;
}

// Optimize routing paths using importance scores
void optimize_paths(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    if (local_idx >= pc.seq_len) return;
    
    // Load current path scores
    PRECISION current_score = path_scores[head_idx * pc.seq_len + local_idx];
    path_cache[head_idx][local_idx] = current_score;
    barrier();
    
    // Find optimal routing
    if (local_idx < pc.seq_len - 1) {
        PRECISION best_score = current_score;
        uint best_next = local_idx + 1;
        
        // Consider alternative routes
        for (uint next = local_idx + 1; next < min(local_idx + 8, pc.seq_len); next++) {
            PRECISION alternative_score = path_cache[head_idx][next];
            PRECISION transition_cost = length(
                vector_load(head_states, head_idx * pc.seq_len * pc.head_dim + local_idx * pc.head_dim) -
                vector_load(head_states, head_idx * pc.seq_len * pc.head_dim + next * pc.head_dim)
            );
            
            PRECISION total_score = alternative_score - transition_cost;
            
            if (total_score > best_score) {
                best_score = total_score;
                best_next = next;
            }
        }
        
        // Update optimized path
        optimized_paths[head_idx * pc.seq_len + local_idx] = best_next;
    }
}

// Detect and handle bottlenecks
void handle_bottlenecks(uint head_idx) {
    uint local_idx = gl_LocalInvocationID.x;
    
    if (local_idx >= pc.seq_len) return;
    
    // Load path importance
    PRECISION importance = path_scores[head_idx * pc.seq_len + local_idx];
    local_scores[head_idx][local_idx] = importance;
    barrier();
    
    // Detect bottlenecks (high importance with low bandwidth)
    if (local_idx < pc.seq_len - 1) {
        PRECISION curr_importance = local_scores[head_idx][local_idx];
        PRECISION next_importance = local_scores[head_idx][local_idx + 1];
        
        if (curr_importance > pc.importance_threshold && 
            next_importance > pc.importance_threshold) {
            // Bottleneck detected - adjust routing
            PRECISION adjustment = min(curr_importance, next_importance) * 0.5;
            
            atomicAdd(routing_edges[head_idx * pc.seq_len + local_idx],
                     adjustment);
            atomicAdd(routing_edges[head_idx * pc.seq_len + local_idx + 1],
                     adjustment);
        }
    }
}

void main() {
    uint global_idx = gl_GlobalInvocationID.x;
    uint head_idx = global_idx % pc.num_heads;
    
    if (head_idx >= pc.num_heads) return;
    
    // Compute path importance
    for (uint path_idx = 0; path_idx < pc.seq_len; path_idx++) {
        path_scores[head_idx * pc.seq_len + path_idx] = 
            compute_path_importance(head_idx, path_idx);
    }
    barrier();
    
    // Update routing graph
    update_routing_graph(head_idx);
    barrier();
    
    // Optimize routing paths
    optimize_paths(head_idx);
    barrier();
    
    // Handle bottlenecks
    handle_bottlenecks(head_idx);
}
