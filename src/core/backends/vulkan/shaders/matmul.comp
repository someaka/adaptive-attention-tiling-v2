#version 450
#extension GL_EXT_shader_explicit_arithmetic_types : require

#include "shader_common.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

// Tensor storage buffers
layout(set = 0, binding = 0) buffer MatrixA {
    PRECISION a[];
};

layout(set = 0, binding = 1) buffer MatrixB {
    PRECISION b[];
};

layout(set = 0, binding = 2) buffer MatrixC {
    PRECISION c[];
};

// Push constants
layout(push_constant) uniform PushConstants {
    uint M;
    uint N;
    uint K;
} pc;

void main() {
    const uint row = gl_GlobalInvocationID.x;
    const uint col = gl_GlobalInvocationID.y;
    
    // Check bounds
    if (row >= pc.M || col >= pc.N) return;
    
    // Use tiled matrix multiplication for better cache utilization
    const uint tile_row = gl_LocalInvocationID.x;
    const uint tile_col = gl_LocalInvocationID.y;
    const uint num_tiles = (pc.K + TILE_SIZE - 1) / TILE_SIZE;
    
    // Shared memory for tiles
    shared PRECISION A_tile[TILE_SIZE][TILE_SIZE];
    shared PRECISION B_tile[TILE_SIZE][TILE_SIZE];
    
    PRECISION sum = 0;
    
    // Process tiles
    for (uint t = 0; t < num_tiles; ++t) {
        // Load tiles cooperatively
        const uint tile_base_k = t * TILE_SIZE;
        
        if (tile_base_k + tile_col < pc.K) {
            A_tile[tile_row][tile_col] = a[row * pc.K + tile_base_k + tile_col];
        } else {
            A_tile[tile_row][tile_col] = 0;
        }
        
        if (tile_base_k + tile_row < pc.K) {
            B_tile[tile_row][tile_col] = b[(tile_base_k + tile_row) * pc.N + col];
        } else {
            B_tile[tile_row][tile_col] = 0;
        }
        
        // Wait for all threads to load their elements
        barrier();
        
        // Compute partial dot product for this tile
        UNROLL_HINT
        for (uint k = 0; k < TILE_SIZE; ++k) {
            sum = fma(A_tile[tile_row][k], B_tile[k][tile_col], sum);
        }
        
        // Wait for all threads to finish using the tiles
        barrier();
    }
    
    // Store result
    if (row < pc.M && col < pc.N) {
        c[row * pc.N + col] = sum;
    }
}
